# -*- coding: utf-8 -*-
"""syntax_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oGsrQ00a1_166cX1Fc89PNZx4P2x5vxu
"""

#syntax_processing

from razdel import sentenize, tokenize
from navec import Navec
from slovnet import Syntax
import networkx as nx
import matplotlib.pyplot as plt

def analyze_syntax(text):
    navec = Navec.load('navec_news_v1_1B_250K_300d_100q.tar')
    syntax_model = Syntax.load('slovnet_syntax_news_v1.tar')
    syntax_model.navec(navec)

    sentences = [sent.text for sent in sentenize(text)]
    chunk = []
    for sent in sentenize(text):
        tokens = [_.text for _ in tokenize(sent.text)]
        chunk.append(tokens)

    results = []

    for i, (markup, sentence) in enumerate(zip(syntax_model.map(chunk), sentences)):
        results.append(f"# Sentence {i+1}\n")
        results.append(f"Sentence: {sentence}\n")

        G = nx.DiGraph()

        token_count = len(markup.tokens)
        for idx in range(token_count):
            G.add_node(idx, label=markup.tokens[idx].text)

        for token in markup.tokens:
            source = int(token.head_id) - 1
            target = int(token.id) - 1
            rel = token.rel
            if source != target and source >= 0:
                if source < token_count and target < token_count:
                    G.add_edge(source, target, label=rel)
                    results.append(f"{source} → {target}: {rel} ({token.text})\n")

        results.append("\n")

        # Визуализация графа
        pos = nx.spring_layout(G, seed=42)
        labels = {idx: markup.tokens[idx].text for idx in range(token_count)}

        plt.figure(figsize=(10, 6))
        nx.draw(G, pos, with_labels=True, labels=labels, node_size=2000,
                node_color="lightblue", font_size=10, font_weight="bold",
                arrows=True, edge_color="gray", alpha=0.9)

        edge_labels = nx.get_edge_attributes(G, "label")
        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=9)

        plt.title(f"Dependency Graph — Sentence {i+1}")
        plt.show()

    return results